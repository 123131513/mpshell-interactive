// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http_record.proto

#include "http_record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_http_5frecord_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_http_5frecord_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_http_message;
}  // namespace protobuf_http_5frecord_2eproto
namespace HTTP_Record {
class http_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<http_message>
      _instance;
} _http_message_default_instance_;
class reqrespairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqrespair>
      _instance;
} _reqrespair_default_instance_;
}  // namespace HTTP_Record
namespace protobuf_http_5frecord_2eproto {
static void InitDefaultshttp_message() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HTTP_Record::_http_message_default_instance_;
    new (ptr) ::HTTP_Record::http_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HTTP_Record::http_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_http_message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultshttp_message}, {}};

static void InitDefaultsreqrespair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HTTP_Record::_reqrespair_default_instance_;
    new (ptr) ::HTTP_Record::reqrespair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HTTP_Record::reqrespair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_reqrespair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsreqrespair}, {
      &protobuf_http_5frecord_2eproto::scc_info_http_message.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_http_message.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqrespair.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::http_message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::http_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::http_message, first_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::http_message, headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::http_message, body_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::reqrespair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::reqrespair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::reqrespair, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::reqrespair, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::reqrespair, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::reqrespair, req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HTTP_Record::reqrespair, res_),
  4,
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::HTTP_Record::http_message)},
  { 11, 21, sizeof(::HTTP_Record::reqrespair)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::HTTP_Record::_http_message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HTTP_Record::_reqrespair_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "http_record.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021http_record.proto\022\013HTTP_Record\"A\n\014http"
      "_message\022\022\n\nfirst_line\030\001 \002(\014\022\017\n\007headers\030"
      "\002 \003(\014\022\014\n\004body\030\003 \001(\014\"\210\001\n\nreqrespair\022\014\n\004po"
      "rt\030\001 \002(\r\022\020\n\010protocol\030\002 \002(\t\022\n\n\002ip\030\003 \002(\t\022&"
      "\n\003req\030\004 \002(\0132\031.HTTP_Record.http_message\022&"
      "\n\003res\030\005 \002(\0132\031.HTTP_Record.http_message"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http_record.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_http_5frecord_2eproto
namespace HTTP_Record {

// ===================================================================

void http_message::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int http_message::kFirstLineFieldNumber;
const int http_message::kHeadersFieldNumber;
const int http_message::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

http_message::http_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_http_5frecord_2eproto::scc_info_http_message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTTP_Record.http_message)
}
http_message::http_message(const http_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  first_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first_line()) {
    first_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_line_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  // @@protoc_insertion_point(copy_constructor:HTTP_Record.http_message)
}

void http_message::SharedCtor() {
  first_line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

http_message::~http_message() {
  // @@protoc_insertion_point(destructor:HTTP_Record.http_message)
  SharedDtor();
}

void http_message::SharedDtor() {
  first_line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void http_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* http_message::descriptor() {
  ::protobuf_http_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const http_message& http_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_http_5frecord_2eproto::scc_info_http_message.base);
  return *internal_default_instance();
}


void http_message::Clear() {
// @@protoc_insertion_point(message_clear_start:HTTP_Record.http_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      first_line_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      body_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool http_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTTP_Record.http_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes first_line = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes headers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTTP_Record.http_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTTP_Record.http_message)
  return false;
#undef DO_
}

void http_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTTP_Record.http_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes first_line = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->first_line(), output);
  }

  // repeated bytes headers = 2;
  for (int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->headers(i), output);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTTP_Record.http_message)
}

::google::protobuf::uint8* http_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HTTP_Record.http_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes first_line = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->first_line(), target);
  }

  // repeated bytes headers = 2;
  for (int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->headers(i), target);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTTP_Record.http_message)
  return target;
}

size_t http_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HTTP_Record.http_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes first_line = 1;
  if (has_first_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->first_line());
  }
  // repeated bytes headers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->headers_size());
  for (int i = 0, n = this->headers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->headers(i));
  }

  // optional bytes body = 3;
  if (has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void http_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTTP_Record.http_message)
  GOOGLE_DCHECK_NE(&from, this);
  const http_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const http_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTTP_Record.http_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTTP_Record.http_message)
    MergeFrom(*source);
  }
}

void http_message::MergeFrom(const http_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTTP_Record.http_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_first_line();
      first_line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_line_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
  }
}

void http_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTTP_Record.http_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void http_message::CopyFrom(const http_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTTP_Record.http_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool http_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void http_message::Swap(http_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void http_message::InternalSwap(http_message* other) {
  using std::swap;
  headers_.InternalSwap(CastToBase(&other->headers_));
  first_line_.Swap(&other->first_line_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_.Swap(&other->body_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata http_message::GetMetadata() const {
  protobuf_http_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqrespair::InitAsDefaultInstance() {
  ::HTTP_Record::_reqrespair_default_instance_._instance.get_mutable()->req_ = const_cast< ::HTTP_Record::http_message*>(
      ::HTTP_Record::http_message::internal_default_instance());
  ::HTTP_Record::_reqrespair_default_instance_._instance.get_mutable()->res_ = const_cast< ::HTTP_Record::http_message*>(
      ::HTTP_Record::http_message::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqrespair::kPortFieldNumber;
const int reqrespair::kProtocolFieldNumber;
const int reqrespair::kIpFieldNumber;
const int reqrespair::kReqFieldNumber;
const int reqrespair::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqrespair::reqrespair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_http_5frecord_2eproto::scc_info_reqrespair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HTTP_Record.reqrespair)
}
reqrespair::reqrespair(const reqrespair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol()) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.has_req()) {
    req_ = new ::HTTP_Record::http_message(*from.req_);
  } else {
    req_ = NULL;
  }
  if (from.has_res()) {
    res_ = new ::HTTP_Record::http_message(*from.res_);
  } else {
    res_ = NULL;
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:HTTP_Record.reqrespair)
}

void reqrespair::SharedCtor() {
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&req_)) + sizeof(port_));
}

reqrespair::~reqrespair() {
  // @@protoc_insertion_point(destructor:HTTP_Record.reqrespair)
  SharedDtor();
}

void reqrespair::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
  if (this != internal_default_instance()) delete res_;
}

void reqrespair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqrespair::descriptor() {
  ::protobuf_http_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_5frecord_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqrespair& reqrespair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_http_5frecord_2eproto::scc_info_reqrespair.base);
  return *internal_default_instance();
}


void reqrespair::Clear() {
// @@protoc_insertion_point(message_clear_start:HTTP_Record.reqrespair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      protocol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(req_ != NULL);
      req_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(res_ != NULL);
      res_->Clear();
    }
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool reqrespair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HTTP_Record.reqrespair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HTTP_Record.reqrespair.protocol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HTTP_Record.reqrespair.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .HTTP_Record.http_message req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .HTTP_Record.http_message res = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HTTP_Record.reqrespair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HTTP_Record.reqrespair)
  return false;
#undef DO_
}

void reqrespair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HTTP_Record.reqrespair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 port = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // required string protocol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTTP_Record.reqrespair.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->protocol(), output);
  }

  // required string ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTTP_Record.reqrespair.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // required .HTTP_Record.http_message req = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_req(), output);
  }

  // required .HTTP_Record.http_message res = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_res(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HTTP_Record.reqrespair)
}

::google::protobuf::uint8* reqrespair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HTTP_Record.reqrespair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 port = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // required string protocol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTTP_Record.reqrespair.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protocol(), target);
  }

  // required string ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HTTP_Record.reqrespair.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required .HTTP_Record.http_message req = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_req(), deterministic, target);
  }

  // required .HTTP_Record.http_message res = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_res(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HTTP_Record.reqrespair)
  return target;
}

size_t reqrespair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HTTP_Record.reqrespair)
  size_t total_size = 0;

  if (has_protocol()) {
    // required string protocol = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  if (has_ip()) {
    // required string ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_req()) {
    // required .HTTP_Record.http_message req = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *req_);
  }

  if (has_res()) {
    // required .HTTP_Record.http_message res = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *res_);
  }

  if (has_port()) {
    // required uint32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
size_t reqrespair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HTTP_Record.reqrespair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string protocol = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());

    // required string ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required .HTTP_Record.http_message req = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *req_);

    // required .HTTP_Record.http_message res = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *res_);

    // required uint32 port = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqrespair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HTTP_Record.reqrespair)
  GOOGLE_DCHECK_NE(&from, this);
  const reqrespair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqrespair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HTTP_Record.reqrespair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HTTP_Record.reqrespair)
    MergeFrom(*source);
  }
}

void reqrespair::MergeFrom(const reqrespair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HTTP_Record.reqrespair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_protocol();
      protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_req()->::HTTP_Record::http_message::MergeFrom(from.req());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_res()->::HTTP_Record::http_message::MergeFrom(from.res());
    }
    if (cached_has_bits & 0x00000010u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void reqrespair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HTTP_Record.reqrespair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqrespair::CopyFrom(const reqrespair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HTTP_Record.reqrespair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqrespair::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_req()) {
    if (!this->req_->IsInitialized()) return false;
  }
  if (has_res()) {
    if (!this->res_->IsInitialized()) return false;
  }
  return true;
}

void reqrespair::Swap(reqrespair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqrespair::InternalSwap(reqrespair* other) {
  using std::swap;
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(req_, other->req_);
  swap(res_, other->res_);
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqrespair::GetMetadata() const {
  protobuf_http_5frecord_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_http_5frecord_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace HTTP_Record
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HTTP_Record::http_message* Arena::CreateMaybeMessage< ::HTTP_Record::http_message >(Arena* arena) {
  return Arena::CreateInternal< ::HTTP_Record::http_message >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HTTP_Record::reqrespair* Arena::CreateMaybeMessage< ::HTTP_Record::reqrespair >(Arena* arena) {
  return Arena::CreateInternal< ::HTTP_Record::reqrespair >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
