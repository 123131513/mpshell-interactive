// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http_record.proto

#ifndef PROTOBUF_INCLUDED_http_5frecord_2eproto
#define PROTOBUF_INCLUDED_http_5frecord_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_http_5frecord_2eproto 

namespace protobuf_http_5frecord_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_http_5frecord_2eproto
namespace HTTP_Record {
class http_message;
class http_messageDefaultTypeInternal;
extern http_messageDefaultTypeInternal _http_message_default_instance_;
class reqrespair;
class reqrespairDefaultTypeInternal;
extern reqrespairDefaultTypeInternal _reqrespair_default_instance_;
}  // namespace HTTP_Record
namespace google {
namespace protobuf {
template<> ::HTTP_Record::http_message* Arena::CreateMaybeMessage<::HTTP_Record::http_message>(Arena*);
template<> ::HTTP_Record::reqrespair* Arena::CreateMaybeMessage<::HTTP_Record::reqrespair>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace HTTP_Record {

// ===================================================================

class http_message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HTTP_Record.http_message) */ {
 public:
  http_message();
  virtual ~http_message();

  http_message(const http_message& from);

  inline http_message& operator=(const http_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  http_message(http_message&& from) noexcept
    : http_message() {
    *this = ::std::move(from);
  }

  inline http_message& operator=(http_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const http_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const http_message* internal_default_instance() {
    return reinterpret_cast<const http_message*>(
               &_http_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(http_message* other);
  friend void swap(http_message& a, http_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline http_message* New() const final {
    return CreateMaybeMessage<http_message>(NULL);
  }

  http_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<http_message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const http_message& from);
  void MergeFrom(const http_message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(http_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes headers = 2;
  int headers_size() const;
  void clear_headers();
  static const int kHeadersFieldNumber = 2;
  const ::std::string& headers(int index) const;
  ::std::string* mutable_headers(int index);
  void set_headers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_headers(int index, ::std::string&& value);
  #endif
  void set_headers(int index, const char* value);
  void set_headers(int index, const void* value, size_t size);
  ::std::string* add_headers();
  void add_headers(const ::std::string& value);
  #if LANG_CXX11
  void add_headers(::std::string&& value);
  #endif
  void add_headers(const char* value);
  void add_headers(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& headers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_headers();

  // required bytes first_line = 1;
  bool has_first_line() const;
  void clear_first_line();
  static const int kFirstLineFieldNumber = 1;
  const ::std::string& first_line() const;
  void set_first_line(const ::std::string& value);
  #if LANG_CXX11
  void set_first_line(::std::string&& value);
  #endif
  void set_first_line(const char* value);
  void set_first_line(const void* value, size_t size);
  ::std::string* mutable_first_line();
  ::std::string* release_first_line();
  void set_allocated_first_line(::std::string* first_line);

  // optional bytes body = 3;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:HTTP_Record.http_message)
 private:
  void set_has_first_line();
  void clear_has_first_line();
  void set_has_body();
  void clear_has_body();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> headers_;
  ::google::protobuf::internal::ArenaStringPtr first_line_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  friend struct ::protobuf_http_5frecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class reqrespair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HTTP_Record.reqrespair) */ {
 public:
  reqrespair();
  virtual ~reqrespair();

  reqrespair(const reqrespair& from);

  inline reqrespair& operator=(const reqrespair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  reqrespair(reqrespair&& from) noexcept
    : reqrespair() {
    *this = ::std::move(from);
  }

  inline reqrespair& operator=(reqrespair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reqrespair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const reqrespair* internal_default_instance() {
    return reinterpret_cast<const reqrespair*>(
               &_reqrespair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(reqrespair* other);
  friend void swap(reqrespair& a, reqrespair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline reqrespair* New() const final {
    return CreateMaybeMessage<reqrespair>(NULL);
  }

  reqrespair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<reqrespair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const reqrespair& from);
  void MergeFrom(const reqrespair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reqrespair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string protocol = 2;
  bool has_protocol() const;
  void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // required string ip = 3;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required .HTTP_Record.http_message req = 4;
  bool has_req() const;
  void clear_req();
  static const int kReqFieldNumber = 4;
  private:
  const ::HTTP_Record::http_message& _internal_req() const;
  public:
  const ::HTTP_Record::http_message& req() const;
  ::HTTP_Record::http_message* release_req();
  ::HTTP_Record::http_message* mutable_req();
  void set_allocated_req(::HTTP_Record::http_message* req);

  // required .HTTP_Record.http_message res = 5;
  bool has_res() const;
  void clear_res();
  static const int kResFieldNumber = 5;
  private:
  const ::HTTP_Record::http_message& _internal_res() const;
  public:
  const ::HTTP_Record::http_message& res() const;
  ::HTTP_Record::http_message* release_res();
  ::HTTP_Record::http_message* mutable_res();
  void set_allocated_res(::HTTP_Record::http_message* res);

  // required uint32 port = 1;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HTTP_Record.reqrespair)
 private:
  void set_has_port();
  void clear_has_port();
  void set_has_protocol();
  void clear_has_protocol();
  void set_has_ip();
  void clear_has_ip();
  void set_has_req();
  void clear_has_req();
  void set_has_res();
  void clear_has_res();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::HTTP_Record::http_message* req_;
  ::HTTP_Record::http_message* res_;
  ::google::protobuf::uint32 port_;
  friend struct ::protobuf_http_5frecord_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// http_message

// required bytes first_line = 1;
inline bool http_message::has_first_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void http_message::set_has_first_line() {
  _has_bits_[0] |= 0x00000001u;
}
inline void http_message::clear_has_first_line() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void http_message::clear_first_line() {
  first_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_line();
}
inline const ::std::string& http_message::first_line() const {
  // @@protoc_insertion_point(field_get:HTTP_Record.http_message.first_line)
  return first_line_.GetNoArena();
}
inline void http_message::set_first_line(const ::std::string& value) {
  set_has_first_line();
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTTP_Record.http_message.first_line)
}
#if LANG_CXX11
inline void http_message::set_first_line(::std::string&& value) {
  set_has_first_line();
  first_line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HTTP_Record.http_message.first_line)
}
#endif
inline void http_message::set_first_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first_line();
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTTP_Record.http_message.first_line)
}
inline void http_message::set_first_line(const void* value, size_t size) {
  set_has_first_line();
  first_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTTP_Record.http_message.first_line)
}
inline ::std::string* http_message::mutable_first_line() {
  set_has_first_line();
  // @@protoc_insertion_point(field_mutable:HTTP_Record.http_message.first_line)
  return first_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* http_message::release_first_line() {
  // @@protoc_insertion_point(field_release:HTTP_Record.http_message.first_line)
  if (!has_first_line()) {
    return NULL;
  }
  clear_has_first_line();
  return first_line_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void http_message::set_allocated_first_line(::std::string* first_line) {
  if (first_line != NULL) {
    set_has_first_line();
  } else {
    clear_has_first_line();
  }
  first_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_line);
  // @@protoc_insertion_point(field_set_allocated:HTTP_Record.http_message.first_line)
}

// repeated bytes headers = 2;
inline int http_message::headers_size() const {
  return headers_.size();
}
inline void http_message::clear_headers() {
  headers_.Clear();
}
inline const ::std::string& http_message::headers(int index) const {
  // @@protoc_insertion_point(field_get:HTTP_Record.http_message.headers)
  return headers_.Get(index);
}
inline ::std::string* http_message::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:HTTP_Record.http_message.headers)
  return headers_.Mutable(index);
}
inline void http_message::set_headers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HTTP_Record.http_message.headers)
  headers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void http_message::set_headers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:HTTP_Record.http_message.headers)
  headers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void http_message::set_headers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  headers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HTTP_Record.http_message.headers)
}
inline void http_message::set_headers(int index, const void* value, size_t size) {
  headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HTTP_Record.http_message.headers)
}
inline ::std::string* http_message::add_headers() {
  // @@protoc_insertion_point(field_add_mutable:HTTP_Record.http_message.headers)
  return headers_.Add();
}
inline void http_message::add_headers(const ::std::string& value) {
  headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HTTP_Record.http_message.headers)
}
#if LANG_CXX11
inline void http_message::add_headers(::std::string&& value) {
  headers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:HTTP_Record.http_message.headers)
}
#endif
inline void http_message::add_headers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  headers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HTTP_Record.http_message.headers)
}
inline void http_message::add_headers(const void* value, size_t size) {
  headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HTTP_Record.http_message.headers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
http_message::headers() const {
  // @@protoc_insertion_point(field_list:HTTP_Record.http_message.headers)
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
http_message::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:HTTP_Record.http_message.headers)
  return &headers_;
}

// optional bytes body = 3;
inline bool http_message::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void http_message::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void http_message::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void http_message::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& http_message::body() const {
  // @@protoc_insertion_point(field_get:HTTP_Record.http_message.body)
  return body_.GetNoArena();
}
inline void http_message::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTTP_Record.http_message.body)
}
#if LANG_CXX11
inline void http_message::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HTTP_Record.http_message.body)
}
#endif
inline void http_message::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTTP_Record.http_message.body)
}
inline void http_message::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTTP_Record.http_message.body)
}
inline ::std::string* http_message::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:HTTP_Record.http_message.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* http_message::release_body() {
  // @@protoc_insertion_point(field_release:HTTP_Record.http_message.body)
  if (!has_body()) {
    return NULL;
  }
  clear_has_body();
  return body_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void http_message::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:HTTP_Record.http_message.body)
}

// -------------------------------------------------------------------

// reqrespair

// required uint32 port = 1;
inline bool reqrespair::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void reqrespair::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void reqrespair::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void reqrespair::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 reqrespair::port() const {
  // @@protoc_insertion_point(field_get:HTTP_Record.reqrespair.port)
  return port_;
}
inline void reqrespair::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:HTTP_Record.reqrespair.port)
}

// required string protocol = 2;
inline bool reqrespair::has_protocol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reqrespair::set_has_protocol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reqrespair::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reqrespair::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol();
}
inline const ::std::string& reqrespair::protocol() const {
  // @@protoc_insertion_point(field_get:HTTP_Record.reqrespair.protocol)
  return protocol_.GetNoArena();
}
inline void reqrespair::set_protocol(const ::std::string& value) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTTP_Record.reqrespair.protocol)
}
#if LANG_CXX11
inline void reqrespair::set_protocol(::std::string&& value) {
  set_has_protocol();
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HTTP_Record.reqrespair.protocol)
}
#endif
inline void reqrespair::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTTP_Record.reqrespair.protocol)
}
inline void reqrespair::set_protocol(const char* value, size_t size) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTTP_Record.reqrespair.protocol)
}
inline ::std::string* reqrespair::mutable_protocol() {
  set_has_protocol();
  // @@protoc_insertion_point(field_mutable:HTTP_Record.reqrespair.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* reqrespair::release_protocol() {
  // @@protoc_insertion_point(field_release:HTTP_Record.reqrespair.protocol)
  if (!has_protocol()) {
    return NULL;
  }
  clear_has_protocol();
  return protocol_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void reqrespair::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    set_has_protocol();
  } else {
    clear_has_protocol();
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:HTTP_Record.reqrespair.protocol)
}

// required string ip = 3;
inline bool reqrespair::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reqrespair::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reqrespair::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reqrespair::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& reqrespair::ip() const {
  // @@protoc_insertion_point(field_get:HTTP_Record.reqrespair.ip)
  return ip_.GetNoArena();
}
inline void reqrespair::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HTTP_Record.reqrespair.ip)
}
#if LANG_CXX11
inline void reqrespair::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HTTP_Record.reqrespair.ip)
}
#endif
inline void reqrespair::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HTTP_Record.reqrespair.ip)
}
inline void reqrespair::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HTTP_Record.reqrespair.ip)
}
inline ::std::string* reqrespair::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:HTTP_Record.reqrespair.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* reqrespair::release_ip() {
  // @@protoc_insertion_point(field_release:HTTP_Record.reqrespair.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void reqrespair::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:HTTP_Record.reqrespair.ip)
}

// required .HTTP_Record.http_message req = 4;
inline bool reqrespair::has_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reqrespair::set_has_req() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reqrespair::clear_has_req() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reqrespair::clear_req() {
  if (req_ != NULL) req_->Clear();
  clear_has_req();
}
inline const ::HTTP_Record::http_message& reqrespair::_internal_req() const {
  return *req_;
}
inline const ::HTTP_Record::http_message& reqrespair::req() const {
  const ::HTTP_Record::http_message* p = req_;
  // @@protoc_insertion_point(field_get:HTTP_Record.reqrespair.req)
  return p != NULL ? *p : *reinterpret_cast<const ::HTTP_Record::http_message*>(
      &::HTTP_Record::_http_message_default_instance_);
}
inline ::HTTP_Record::http_message* reqrespair::release_req() {
  // @@protoc_insertion_point(field_release:HTTP_Record.reqrespair.req)
  clear_has_req();
  ::HTTP_Record::http_message* temp = req_;
  req_ = NULL;
  return temp;
}
inline ::HTTP_Record::http_message* reqrespair::mutable_req() {
  set_has_req();
  if (req_ == NULL) {
    auto* p = CreateMaybeMessage<::HTTP_Record::http_message>(GetArenaNoVirtual());
    req_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HTTP_Record.reqrespair.req)
  return req_;
}
inline void reqrespair::set_allocated_req(::HTTP_Record::http_message* req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete req_;
  }
  if (req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
  } else {
    clear_has_req();
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:HTTP_Record.reqrespair.req)
}

// required .HTTP_Record.http_message res = 5;
inline bool reqrespair::has_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void reqrespair::set_has_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void reqrespair::clear_has_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void reqrespair::clear_res() {
  if (res_ != NULL) res_->Clear();
  clear_has_res();
}
inline const ::HTTP_Record::http_message& reqrespair::_internal_res() const {
  return *res_;
}
inline const ::HTTP_Record::http_message& reqrespair::res() const {
  const ::HTTP_Record::http_message* p = res_;
  // @@protoc_insertion_point(field_get:HTTP_Record.reqrespair.res)
  return p != NULL ? *p : *reinterpret_cast<const ::HTTP_Record::http_message*>(
      &::HTTP_Record::_http_message_default_instance_);
}
inline ::HTTP_Record::http_message* reqrespair::release_res() {
  // @@protoc_insertion_point(field_release:HTTP_Record.reqrespair.res)
  clear_has_res();
  ::HTTP_Record::http_message* temp = res_;
  res_ = NULL;
  return temp;
}
inline ::HTTP_Record::http_message* reqrespair::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    auto* p = CreateMaybeMessage<::HTTP_Record::http_message>(GetArenaNoVirtual());
    res_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HTTP_Record.reqrespair.res)
  return res_;
}
inline void reqrespair::set_allocated_res(::HTTP_Record::http_message* res) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete res_;
  }
  if (res) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      res = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    set_has_res();
  } else {
    clear_has_res();
  }
  res_ = res;
  // @@protoc_insertion_point(field_set_allocated:HTTP_Record.reqrespair.res)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HTTP_Record

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_http_5frecord_2eproto
